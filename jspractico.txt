2/29 Test de JavaScript

Variables y operaciones
1-Responde las siguientes preguntas en la sección de comentarios:
¿Qué es una variable y para qué sirve? 
Es una espacio de memoria reservado para almacenar datos temporales.

¿Cuál es la diferencia entre declarar e inicializar una variable? 
Declarar una variable es cuando se crea e inicializar es cuando se le asigna el valor y tipo de dato.

¿Cuál es la diferencia entre sumar números y concatenar strings?
Al sumar numeros obtendremos resultados de la suma entre números. Por ejemplo 1 + 1 = 2
Al concatenar strings estaremos sumando tipo de datos caracter a nuestro string. Por ejemplo "cas" + "a" = "casa"

¿Cuál operador me permite sumar o concatenar? 
El operador "+"

2-Determina el nombre y tipo de dato para almacenar en variables la siguiente información:
Nombre = string
Apellido = string
Nombre de usuario en Platzi = string
Edad = integer
Correo electrónico = string
Mayor de edad = boolean
Dinero ahorrado = float
Deudas = float

3-Traduce a código JavaScript las variables del ejemplo anterior y deja tu código en los comentarios.
var nombre = "Martin"
var apellido = "Bonansea"
var userPlatzi = "martinbonansea"
var edad = 47
var correo = "noteloescribo@gmail.com"
var mayorEdad = True
var ahorros = 10000
var deudas = 1000

4-Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
Nombre completo (nombre y apellido)
Dinero real (dinero ahorrado menos deudas)

var  nombreCompleto = nombre + apellido
var dineroReal = ahorros - deudas
console.log(nombreCompleto, dineroReal);

Funciones
1-Responde las siguientes preguntas en la sección de comentarios:
¿Qué es una función?
Es un grupo de instrucciones que devuelve un valor.

¿Cuándo me sirve usar una función en mi código?
Cuando tenga un proceso que deba realizar reiteras veces, entonces en lugar de repetir el codigo tantas veces lo preciso, lo encapsulo en una funcion.

¿Cuál es la diferencia entre parámetros y argumentos de una función?
Los parámetros son los valores estipulados que espera recibir la funcion.
Los argumentos son los valores que enviamos a la función.

2-Convierte el siguiente código en una función, pero, cambiando cuando sea necesario las variables constantes por parámetros y argumentos en una función:

const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

//console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");

function myNameIs(nombre, apodo) {
	console.log("Mi nombre es " + nombre + ", pero prefiero que me digas " + apodo + ".");
}

myNameIs(completeName, nickname);

Condicionales
1-Responde las siguientes preguntas en la sección de comentarios:
¿Qué es un condicional?
Es una instruccion que nos permite evaluar si una comparación es verdadera o falsa para poder tomar una descición.

¿Qué tipos de condicionales existen en JavaScript y cuáles son sus diferencias?
if  : evalua una condicion devolviendo verdadero o falso.
switch : evalua multiples condiciones.
for	y while : evaluan la condicion establecida y mientras esta se cumpla proporciona lugar para que se repitan instrucciones, es una construcción de bucle.

¿Puedo combinar funciones y condicionales?
Si.

2-Replica el comportamiento del siguiente código que usa la sentencia switch utilizando if, else y else if:
const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un año");
       break;
   case "ExpertPlus":
       console.log("Tú y alguien más pueden tomar TODOS los cursos de Platzi durante un año");
       break;
}

const tipoDeSuscripcion = "basic";
if (tipoDeSuscripcion == "Free") {
    return "solo puedes tomar los cursos gratis";
}else if(tipoDeSuscripcion == "Basic") {
    return "puedes tomar casi todos los cursos de Platzi durante un mes";
}else if(tipoDeSuscripcion == "Expert") {
    return "puedes tomar casi todos los cursos de Platzi durante un año";
}else if(tipoDeSuscripcion == "ExpertPlus") {
    return "Tú y alguien mas pueden tomar TODOS los cursos de Platzi durante un año";
}

Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).
💡 Bonus: si ya eres una experta o experto en el lenguaje, te desafío a comentar cómo replicar este comportamiento con arrays u objetos y un solo condicional. 

const tipoDeSuscripcion = "basic";

if (tipoDeSuscripcion == "Free") {
    return "solo puedes tomar los cursos gratis";
	}
if(tipoDeSuscripcion == "Basic") {
    return "puedes tomar casi todos los cursos de Platzi durante un mes";
	}
if(tipoDeSuscripcion == "Expert") {
    return "puedes tomar casi todos los cursos de Platzi durante un año";
	}
if(tipoDeSuscripcion == "ExpertPlus") {
    return "Tú y alguien mas pueden tomar TODOS los cursos de Platzi durante un año";
	}

Otra solucion
const tiposDeSuscripciones = {
    free: 'Solo puedes tomar los cursos gratis',
    basic: 'Puedes tomar casi todos los cursos de Platzi durante un mes',
    expert: 'Puedes tomar casi todos los cursos de Platzi durante un año',
    expertduo: 'Tú y alguien más pueden tomar TODOS los cursos de Platzi durante un año',
};

function conseguirTipoSuscripcion(suscripcion) {
    if (tiposDeSuscripciones[suscripcion]) {
        console.log(tiposDeSuscripciones[suscripcion]);
        return;
    }

    console.warn('Ese tipo de suscripción no existe')
}

Ciclos
1-Responde las siguientes preguntas en la sección de comentarios:
¿Qué es un ciclo?
Un grupo de instrucciones que se repiten constantemente, loop.

¿Qué tipos de ciclos existen en JavaScript?
for  y while.

¿Qué es un ciclo infinito y por qué es un problema?
Es un grupo de instrucciones que se repiten sin fin, sin detenerse. Todo cliclo debe tener un condicional para detenerlo.

¿Puedo mezclar ciclos y condicionales?	
Si.

2-Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:
for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}

var i = 0;
while (i < 5) {
    i++;
    console.log("El valor de i es: " + i);
}
var i = 10;
while (i >= 2) {
    console.log("El valor de i es: " + i);
	i--;
}

3-Escribe un código en JavaScript que le pregunte a los usuarios cuánto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.
💡 Pista: puedes usar la función prompt de JavaScript

var usuarioResponde = parseInt(prompt("Cuanto es 2 + 2 ??? "))
var respuestaok = 4
function validarResp(usuario, respuesta) {
    while(usuario === respuesta) {
        return console.log("Felicitaciones !!!");
    } 
	return console.log("Respuesta errónea");	
}
validarResp(usuarioResponde, respuestaok);

Otra opción :
var respuesta = prompt("Cuanto es 2 + 2 ??? ")
while (respuesta != '4') {
    let pregunta = prompt('¿Cuánto es 2 + 2?')
    respuesta = pregunta;
}

Listas
Responde las siguientes preguntas en la sección de comentarios:
¿Qué es un array?
Es un objeto donde guardamos una coleccion de datos.

¿Qué es un objeto?
Es una entidad con propiedades y tipos.

¿Cuándo es mejor usar objetos o arrays?
Es mejor usar objetos cuando debemos encapsular nuestro codigo o procesos en metodos.
Los arrays es mas utilizables cuando tenemos una coleccion de datos.

¿Puedo mezclar arrays con objetos o incluso objetos con arrays?
Si.

2 Crea una función que pueda recibir cualquier array como parámetro e imprima su primer elemento.
var nombres = ['Martin','Juan Carlos', 'Ismael', 'Fito Paez'];

function imprimirNombres(nombres){
    console.log(nombres[0]);
}
imprimirNombres(nombres);

3 Crea una función que pueda recibir cualquier array como parámetro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

var nombres = ['Martin','Juan Carlos', 'Ismael', 'Fito Paez'];

function imprimirNombres(nombres){
	for (i = 0; i < nombres.length; i++){
	    console.log(nombres[i]);
		}
}
imprimirNombres(nombres);

4 Crea una función que pueda recibir cualquier objeto como parámetro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).
var nombres = {
				nombre: 'Martin',
				direccion: 'Pellegrini 833',
				ciudad: 'Rosario'
			};

function imprimirObjeto(objeto){
	for ( key in objeto){
	    console.log(objeto[key]);
		}
}
imprimirObjeto(nombres);

Otra opcion
//Creo el objeto
const obj = {
  nombre: 'Fulanito',
  edad: 3,
  comidasFavoritas: ['Pollo frito', 'vegetales'],
};

function imprimirElementoPorElementoObjeto(obj) {
	//convertir un objeto en array con Object.values()
    const arr = Object.values(obj);
    for (let i = 0; i < arr.length; i++) {
        console.log(arr[i])
    }
}

imprimirObjeto(obj);


CUESTIONARIO
1.Los ciclos while primero ejecutan y después validan su condicional. Mientras que los ciclos do while primero validan su condición y luego sí ejecutan su bloque de código.
Falso

2.Tienes el siguiente bloque de código: console.log("Juanita"). ¿Qué es "Juanita" para la función console.log?
Un argumento.

3.Tienes un condicional if dentro de una función. Si tu condicional se cumple, el resto de tu función NO se debe ejecutar. ¿Cómo lo harías?
Agregando un return; antes de que termine mi condicional.

4.¿Qué palabra reservada usarías para crear una variable que nunca pueda cambiar su valor?
const

11/29 Leyendo HTML desde JavaScript
se utiliza la función “document.querySelector” para seleccionar los elementos HTML creados anteriormente. 
Esta función nos permite seleccionar los elementos HTML según:
nombre de la etiqueta
nombre de la clase
ID del elemento
Existen otras funciones para leer HTML desde JavaScript como son:
getElementById
getElementsByClassName
getElementsByName
getElementsByTagName
Ejemplos:

getElementById();
//Obtiene el elemento con el ID "miParrafo"
const miParrafo = document.getElementById("miParrafo");
getElementsByClassName();
//Obtiene todos los elementos con la clase "miClase"
const elementosConClase = document.getElementsByClassName('miClase´);
getElementsByName();
//Obtiene todos los elementos con el nombre "miNombre"
const elementosConNombre = document.getElementByName("miNombre");
getElementByTagName();
// Obtiene todos los elementos con la etiqueta "p"
const elementosPTag = document.getElementByTagName("p");
querySelector();
// Obtiene el primer elemento que tenga la clase "miClase"
const miElemento = document.querySelector(".miClase");
querySelectorAll();
// Obtiene todos los elementos que tengan la clase "miClase"
const elementosConClase = document.querySelectorAll(".miClase");

12/29 Escribiendo HTML desde JavaScript
13/29 Eventos en JavaScript: interactuando con usuarios

